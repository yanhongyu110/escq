<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


    <!-- ******************** redis缓存   **********************-->

    <!--注解一定要配置，不然不起作用-->
    <!--<cache:annotation-driven cache-manager="cacheManager"/>-->


    <!-- 单个redis配置 -->
    <!-- redis连接池的配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="100"/>
        <property name="minIdle" value="50"/>
        <property name="testOnBorrow" value="true"/>
        <!--<property name="testOnReturn" value="${redis.testOnReturn}"/>-->
    </bean>


    <!--&lt;!&ndash; redis的连接池pool，不是必选项：timeout/password  &ndash;&gt;-->
    <!--<bean id = "jedisPool" class="redis.clients.jedis.JedisPool">-->
        <!--<constructor-arg index="0" ref="jedisPoolConfig"/>-->
        <!--<constructor-arg index="1" value="192.167.10.228"/>-->
        <!--<constructor-arg index="2" value="6379" type="int"/> &lt;!&ndash; port&ndash;&gt;-->
        <!--<constructor-arg index="3" value="10000" type="int"/> &lt;!&ndash; timeout &ndash;&gt;-->
        <!--<constructor-arg index="4" value="784512"/>  &lt;!&ndash; password &ndash;&gt;-->
    <!--</bean>-->


    <!-- 以下是spring-data-redis配置方式 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="192.168.1.10"/>
        <property name="port" value="6379"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <!--<property name="usePool" value="true"/>-->
        <!--<property name="password" value="784512"/>-->
        <!--<property name="database" value="10"/>-->
    </bean>

    <!--  SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。
       StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。
       RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。
       就是因为序列化策略的不同，即使是同一个key用不同的Template去序列化，结果是不同的。所以根据key去删除数据的时候就出现了删除失败的问题。
    -->
    <!-- redis 序列化策略 ，通常情况下key值采用String序列化策略， -->
    <!-- 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； -->
    <!-- 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
    <!--<bean id="stringRedisSerializer"  class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="connectionFactory" />-->
        <!--&lt;!&ndash; 下面三个报错 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="valueSerializer" ref="stringRedisSerializer"/>&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="keySerializer" ref="stringRedisSerializer" />&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="hashKeySerializer" ref="stringRedisSerializer" />&ndash;&gt;-->
        <!--<property name="enableTransactionSupport" value="true"/> &lt;!&ndash; 是否启用事务 这里使用的是spring 的   Transaction 注解&ndash;&gt;-->
    <!--</bean>-->

    <!-- 缓存管理器 -->
    <!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager" >-->
        <!--<constructor-arg ref="redisTemplate"/>-->
    <!--</bean>-->


    <!--redis 来管理 springMvc的session，如果引用shiro的话，建议在shiro里面管理session-->
    <!--spring redis-session-->
    <bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds"  value="1800"/>
    </bean>
    <!-- 让Spring Session不再执行config命令 -->
    <util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP"/>

    <!-- ******************** redis缓存   **********************-->

</beans>