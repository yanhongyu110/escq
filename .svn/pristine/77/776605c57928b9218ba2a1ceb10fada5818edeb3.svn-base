package com.jero.esc.controller.activity;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.net.ssl.SSLContext;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

public class WeixinDraw {

	// private static Logger logger = Logger.getLogger(Background.class);
	public static void main(String[] args) throws Exception {
		//运行main方法，可以测试配置是否正确。配置信息写在同级目录的 weinxin.config.xml里
//		String openid = "o5urXw6B-zXZ61HX7eiuG1AmSXxM";//这是个人的微信openID,欢迎大家给我付款。哈哈。。。。。
//		int amount = 100;  //最低付款金额为100分。付款金额以分为单位
//		String desc = "节日快乐";
//		String partner_trade_no = "1234567890008"; //同一单号不可以重复提交，如果重复提交同一单号，微信以为是同一次付款，只要成功一次，以后都会无视。
//		WeixinDraw wd = new WeixinDraw();
//		Map<String, String> map = wd.transfer(openid, amount, desc, partner_trade_no);
//		if (StringUtils.equals(map.get("state"), "SUCCESS")) {
//			System.out.println(map.get("payment_no"));
//			System.out.println(map.get("payment_time"));
//		} else {
//			System.out.println(map.get("err_code"));
//			System.out.println(map.get("err_code_des"));
//		}
	}

	@SuppressWarnings("deprecation")
	public Map<String, String> sendredpack(RedPacket redPacket) throws JDOMException {
		Map<String, String> map = new HashMap<String, String>(); // 定义一个返回MAP
		try {
			String url = "https://api.mch.weixin.qq.com/mmpaymkttransfers/sendredpack";
			// 设置支付参数
			SortedMap<Object, Object> signParams = new TreeMap<Object, Object>();
//			signParams.put("appid", redPacket.getWxappid()); // 微信分配的公众账号ID（企业号corpid即为此appId）
//			signParams.put("mch_id", redPacket.getMch_id());// 微信支付分配的商户号
//			signParams.put("device_info", "WEB"); // 随机字符串，不长于32位
//			signParams.put("body", "test"); // 商户订单号，需保持唯一性
//			signParams.put("nonce_str", redPacket.getNonce_str()); // 商户appid下，某用户的openid
			
			
			
//			signParams.put("nonce_str", redPacket.getNonce_str());
//			signParams.put("mch_billno", redPacket.getMch_billno());
//			signParams.put("mch_id", redPacket.getMch_id());
//			signParams.put("wxappid", redPacket.getWxappid());
//			signParams.put("send_name", redPacket.getSend_name());
//			signParams.put("re_openid", redPacket.getRe_openid());
//			signParams.put("total_amount", redPacket.getTotal_amount());
//			signParams.put("total_num", redPacket.getTotal_num());
//			signParams.put("wishing", redPacket.getWishing());
//			signParams.put("client_ip", redPacket.getClient_ip());
//			signParams.put("act_name", redPacket.getAct_name());
//			signParams.put("remark", redPacket.getRemark());
			
			// 生成支付签名，要采用URLENCODER的原始值进行MD5算法！
//            System.out.println(signParams);
//			String sign = "";
//			sign = createSign("UTF-8", signParams);
			
			
			
			
			
		       StringBuffer sign = new StringBuffer();
		        sign.append("act_name=").append(redPacket.getAct_name());
		        sign.append("&client_ip=").append(redPacket.getClient_ip());
		        sign.append("&mch_billno=").append(redPacket.getMch_billno());
		        sign.append("&mch_id=").append(redPacket.getMch_id());
		        sign.append("&nonce_str=").append(redPacket.getNonce_str());
		        sign.append("&re_openid=").append(redPacket.getRe_openid());
		        sign.append("&remark=").append(redPacket.getRemark());
		        sign.append("&send_name=").append(redPacket.getSend_name());
		        sign.append("&total_amount=").append(redPacket.getTotal_amount());
		        sign.append("&total_num=").append(redPacket.getTotal_num());
		        sign.append("&wishing=").append(redPacket.getWishing());
		        sign.append("&wxappid=").append(redPacket.getWxappid());
		        sign.append("&key=").append("jindaojia20171129D123C654DDE6AC1");
		        String lastSign = DigestUtils.md5Hex(sign.toString()).toUpperCase();
			
			 System.out.println("签名"+lastSign);
			String data = "<xml><nonce_str>";
			data += redPacket.getNonce_str() + "</nonce_str><mch_billno>"; // APPID
			data += redPacket.getMch_billno() + "</mch_billno><mch_id>"; // 商户ID
			data += redPacket.getMch_id() + "</mch_id><wxappid>"; // 随机字符串
			data += redPacket.getWxappid() + "</wxappid><send_name>"; // 订单号
			data += redPacket.getSend_name() + "</send_name><re_openid>"; // 是否强制实名验证
			data += redPacket.getRe_openid() + "</re_openid><total_amount>"; // 是否强制实名验证
			data += redPacket.getTotal_amount() + "</total_amount><total_num>"; // 是否强制实名验证
			data += redPacket.getTotal_num() + "</total_num><wishing>"; // 是否强制实名验证
			data += redPacket.getWishing() + "</wishing><client_ip>"; // 是否强制实名验证
			data += redPacket.getClient_ip() + "</client_ip><act_name>"; // 是否强制实名验证
			data += redPacket.getAct_name() + "</act_name><remark>"; // 是否强制实名验证
			data += redPacket.getRemark() + "</remark><sign>"; // 是否强制实名验证
			data += lastSign + "</sign></xml>";// 签名
			System.out.println(data);
			
			InputStream configFile = WeixinDraw.class.getResourceAsStream("weixin.config.xml");
			SAXReader reader = new SAXReader();
			Document doc = reader.read(configFile);
			Element config = doc.getRootElement();
			
			// 获取证书，发送POST请求；
			KeyStore keyStore = KeyStore.getInstance("PKCS12");
			FileInputStream instream = new FileInputStream(new File(config.elementTextTrim("cert_path"))); // 从配置文件里读取证书的路径信息
			keyStore.load(instream, redPacket.getMch_id().toCharArray());// 证书密码是商户ID
			instream.close();
			SSLContext sslcontext = SSLContexts.custom().loadKeyMaterial(keyStore, redPacket.getMch_id().toCharArray()).build();
			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext, new String[] { "TLSv1" }, null, SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
			CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();
			HttpPost httpost = new HttpPost(url); //
			httpost.addHeader("Connection", "keep-alive");
			httpost.addHeader("Accept", "*/*");
			httpost.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
			httpost.addHeader("Host", "api.mch.weixin.qq.com");
			httpost.addHeader("X-Requested-With", "XMLHttpRequest");
			httpost.addHeader("Cache-Control", "max-age=0");
			httpost.addHeader("User-Agent", "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0) ");
			httpost.setEntity(new StringEntity(data, "UTF-8"));
			CloseableHttpResponse response = httpclient.execute(httpost);
			HttpEntity entity = response.getEntity();

			
			String jsonStr = EntityUtils.toString(response.getEntity(), "UTF-8");
			
			StringReader read = new StringReader(jsonStr.toString());
			// 创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入
			InputSource source = new InputSource(read);
			// 创建一个新的SAXBuilder
			SAXBuilder sb = new SAXBuilder();
			// 通过输入源构造一个Document
			org.jdom.Document doc1;
			doc1 = (org.jdom.Document) sb.build(source);

			org.jdom.Element root = doc1.getRootElement();// 指向根节点
			List<org.jdom.Element> list = root.getChildren();
			Map map1 = new TreeMap();
			if (list != null && list.size() > 0) {
				for (org.jdom.Element element : list) {
					System.out.println("key是：" + element.getName()
							+ "，值是：" + element.getText());
					map1.put(element.getName(), element.getText());
				}
			}
			
			
			
			
//			EntityUtils.consume(entity);
//			// 把返回的字符串解释成DOM节点
//			Document dom = DocumentHelper.parseText(jsonStr);
//			Element root = dom.getRootElement();
//			String returnCode = root.element("return_code").getText(); // 获取返回代码
//			if (StringUtils.equals(returnCode, "SUCCESS")) { // 判断返回码为成功还是失败
//				map.put("return_msg", root.element("return_msg").getText());
//				map.put("return_code", root.element("return_code").getText());
//				map.put("err_code_des", root.element("err_code_des").getText());
//				return map;
//			} else {
//				String err_code = root.element("err_code").getText(); // 获取错误代码
//				String err_code_des = root.element("err_code_des").getText();// 获取错误描述
//				map.put("state", returnCode);// state
//				map.put("err_code", err_code);// err_code
//				map.put("err_code_des", err_code_des);// err_code_des
//				return map;
//			}
			return new HashMap<>();
		} catch (DocumentException ex) {
			ex.printStackTrace();
			return map;
		} catch (UnrecoverableKeyException ex) {
			ex.printStackTrace();
			return map;
		} catch (KeyManagementException ex) {
			ex.printStackTrace();
			return map;
		} catch (KeyStoreException ex) {
			ex.printStackTrace();
			return map;
		} catch (CertificateException ex) {
			ex.printStackTrace();
			return map;
		} catch (IOException ex) {
			ex.printStackTrace();
			return map;
		} catch (NoSuchAlgorithmException ex) {
			ex.printStackTrace();
			return map;
		}
	}

	/**
	 * @author 吴桂生
	 * @date 2016-7-5下午2:29:34
	 * @Description：sign签名
	 * @param characterEncoding
	 *            编码格式
	 * @param parameters
	 *            请求参数
	 * @return
	 */
	private static String createSign(String characterEncoding, SortedMap<Object, Object> parameters) {
		StringBuffer sb = new StringBuffer();
		Set<Entry<Object, Object>> es = parameters.entrySet();
		Iterator<Entry<Object, Object>> it = es.iterator();
		while (it.hasNext()) {
			Entry<Object, Object> entry = it.next();
			String k = (String) entry.getKey();
			Object v = entry.getValue();
			if (null != v && !"".equals(v) && !"sign".equals(k) && !"key".equals(k)) {
				sb.append(k + "=" + v + "&");
			}
		}
		sb.append("key=" + "jindaojia20171129D123C654DDE6AC1");
		String sign = MD5Encode(sb.toString(), characterEncoding).toUpperCase();
		return sign;
	}

	// MD5Util工具类中相关的方法

	private static String byteArrayToHexString(byte b[]) {
		StringBuffer resultSb = new StringBuffer();
		for (int i = 0; i < b.length; i++)
			resultSb.append(byteToHexString(b[i]));

		return resultSb.toString();
	}

	private static String byteToHexString(byte b) {
		int n = b;
		if (n < 0)
			n += 256;
		int d1 = n / 16;
		int d2 = n % 16;
		return hexDigits[d1] + hexDigits[d2];
	}

	private static String MD5Encode(String origin, String charsetname) {
		String resultString = null;
		try {
			resultString = new String(origin);
			MessageDigest md = MessageDigest.getInstance("MD5");
			if (charsetname == null || "".equals(charsetname))
				resultString = byteArrayToHexString(md.digest(resultString.getBytes()));
			else
				resultString = byteArrayToHexString(md.digest(resultString.getBytes(charsetname)));
		} catch (Exception exception) {
		}
		return resultString;
	}

	private static final String hexDigits[] = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };
}