package com.jero.esc.common.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.UUID;

public class FileUtil {

	/**
	 * 获取文件扩展名
	 * 
	 * @param fileName
	 * @return
	 */
	public static String getExtention(String fileName) {
		int pos = fileName.lastIndexOf(".");
		return fileName.substring(pos);
	}

	/**
	 * 获取文件扩展名
	 * 
	 * @param file
	 * @return
	 */
	public static String getExtention(File file) {
		if (file == null) {
			return null;
		}
		if (file.isDirectory()) {
			return "";
		}
		String fileName = file.getName();
		String prefix = fileName.substring(fileName.lastIndexOf("."));
		return prefix;
	}

	/**
	 * 文件拷贝
	 * 
	 * @param resourceFile源文件
	 * @param targetFileName目的文件
	 * @return
	 * @throws IOException
	 */
	public static boolean copyFile(String resourceFimeName, String targetFileName) throws IOException {
		return copyFile(new File(resourceFimeName), new File(targetFileName));
	}

	/**
	 * 文件拷贝
	 * 
	 * @param resourceFile源文件
	 * @param targetFileName目的文件
	 * @return
	 * @throws IOException
	 */
	public static boolean copyFile(String resourceFimeName, File targetFile) throws IOException {
		return copyFile(new File(resourceFimeName), targetFile);
	}

	/**
	 * 文件拷贝
	 * 
	 * @param resourceFile源文件
	 * @param targetFileName目的文件
	 * @return
	 * @throws IOException
	 */
	public static boolean copyFile(File resourceFile, String targetFileName) throws IOException {
		return copyFile(resourceFile, new File(targetFileName));
	}

	/**
	 * 文件拷贝
	 * 
	 * @param resourceFile源文件
	 * @param targetFile目的文件
	 * @return
	 */
	public static boolean copyFile(File resourceFile, File targetFile) throws IOException {
		if (resourceFile == null || targetFile == null)
			return false;

		FileInputStream in = null;
		FileOutputStream out = null;
		try {
			if (resourceFile.exists()) {
				if (!targetFile.exists()) {
					File parentFile = targetFile.getParentFile();
					if (!parentFile.exists())
						parentFile.mkdirs();
					targetFile.createNewFile();
				}
				in = new FileInputStream(resourceFile);
				out = new FileOutputStream(targetFile);
				byte[] buffer = new byte[1024 * 8];
				int i = 0;

				while ((i = in.read(buffer)) != -1) {
					out.write(buffer, 0, i);
				}
				out.flush();
				return true;
			} else {
				return false;
			}
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
		}
	}

	/**
	 * 文件刪除
	 * 
	 * @param fileName要删除文件的全路径
	 */
	public static void deleteFile(String fileName) {
		if (fileName != null) {
			deleteFile(new File(fileName));
		}
	}

	/**
	 * 删除文件
	 * 
	 * @param file要删除的文件
	 */
	public static void deleteFile(File file) {
		if (file != null && file.exists()) {
			file.delete();
		}
	}

	public static String getFileNameByUUID() {
		UUID uuid = UUID.randomUUID();
		return uuid.toString().trim().replaceAll("-", "");
	}

}
