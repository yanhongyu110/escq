<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--Shiro 扫描 不然注解无效 尽量只扫描需要扫描的包  不要全部都扫描-->

    <!-- enable component scanning -->
    <context:component-scan base-package="com.jero.esc.*" />

    <!-- enable autowire -->
    <context:annotation-config />

    <!--&lt;!&ndash; Shiro注解&ndash;&gt;-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 缓存管理器 使用Ehcache实现 &ndash;&gt;-->
    <!--&lt;!&ndash;和spring集成  最好使用spring自带的缓存&ndash;&gt;-->
    <!--<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
        <!--<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
    <!--</bean>-->

    <!-- 缓存管理器 使用Redis实现 -->
    <!--<bean id="shiroCacheManager" class="com.hex.hexShiro.beans.RedisCacheManager">-->
        <!--<property name="pre" value="shiro_cache:"/>-->
    <!--</bean>-->
    <!--<bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">-->
        <!--<property name="sessionValidationSchedulerEnabled" value="false"/>-->
    <!--</bean>-->


    <!-- 凭证匹配器 -->
    <!--<bean id="credentialsMatcher" class="com.github.zhangkaitao.shiro.chapter12.credentials.RetryLimitHashedCredentialsMatcher">-->
    <!--<constructor-arg ref="cacheManager"/>-->
    <!--<property name="hashAlgorithmName" value="md5"/>-->
    <!--<property name="hashIterations" value="2"/>-->
    <!--<property name="storedCredentialsHexEncoded" value="true"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; Realm实现 &ndash;&gt;-->
    <bean id="userRealm" class="com.jero.esc.common.shiro.realms.SignRealm">
        <property name="cachingEnabled" value="false"/>
    </bean>




    <!-- 会话持久化   EnterpriseCacheSessionDAO -->
    <!--<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">-->
        <!--<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>-->
        <!--<property name="sessionIdGenerator" ref="sessionIdGenerator"/>-->
    <!--</bean>-->
    <!-- 这里使用自定义的session 存到redis下-->
    <!--<bean id="sessionDAO" class="com.hex.hexShiro.beans.SessionRedisDao">-->
        <!--<property name="pre" value="shiro-activeSessionCache"/>-->
        <!--<property name="sessionIdGenerator" ref="sessionIdGenerator"/>-->
    <!--</bean>-->

    <!--<bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">-->
        <!--<property name="sessionValidationSchedulerEnabled" value="false"/>-->
    <!--</bean>-->


    <!--token的Dao-->
    <bean class="com.jero.esc.common.shiro.realms.TokenDao">
        <property name="cacheName" value="tokenChae"/>
    </bean>


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="subjectFactory" ref="subjectFactory" />
        <!--<property name="sessionManager" ref="sessionManager"/>-->
        <property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled" value="false"/>    <!-- subject不创建session -->
    </bean>
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <bean id="subjectFactory"  class="com.jero.esc.common.shiro.realms.StatelessDefaultSubjectFactory"/>



    <!-- 拦截器列表 -->
    <bean id="ssl" class="org.apache.shiro.web.filter.authz.SslFilter">
        <property name="port" value="8443"/>
    </bean>


    <bean id="tokenFilter" class="com.jero.esc.common.shiro.realms.TokenFilter">
    </bean>





    <!-- Shiro的过滤链 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="filters">
            <map>
                <entry key="ssl" value-ref="ssl"/>
                <entry key="token" value-ref="tokenFilter"/>
                <!--<entry key="authcBasic" value-ref="authcBasic"/>-->
                <!--<entry key="f1" value-ref="f1"/>-->
                <!--<entry key="f2" value-ref="f2"/>-->
                <!--<entry key="f3" value-ref="f3"/>-->
                <!--<entry key="f4" value-ref="f4"/>-->
            </map>
        </property>
        <!--全局的拦截规则-->
        <property name="filterChainDefinitions">
            <value><!-- 拦截规则-->
                /appapi/userinfo/login=anon
                /appapi/userinfo/validateToken=anon
                /appapi/userinfo/register=anon
                /appapi/userinfo/logout=anon
                /appapi/userinfo/sendMesToUser=anon
                /appapi/userinfo/modifyPassByPrimaryKey=anon
                /appapi/company/**=anon
                /appapi/demand/showListAjax=anon
                /appapi/demand/home=anon
                /appapi/demand/gotodemand=anon
                /appapi/demand/gotodemandList=anon
                /appapi/demand/demandList=anon
                /appapi/demand/findDemandById=anon
                /appapi/demand/findDemandOthers=anon
                /appapi/goodsinfo/service/queryServiceVo=anon
                /appapi/goodsinfo/service/queryServiceVoTree=anon
                /appapi/goodsinfo/service/queryProviderVoTree=anon
                /appapi/goodsinfo/service/queryServiceStep=anon
                /appapi/goodsinfo/service/queryServiceRemark=anon
                /appapi/goodsinfo/service/queryCountRemark=anon
                /appapi/goodsinfo/service/queryAllCountServiceRemarkByTime=anon
                /appapi/goodsinfo/service/queryServiceRemarkByLogIdServiceId=anon
                /appapi/goodsinfo/service/queryCountRemarkByLogIdServiceId=anon
                /appapi/goodsinfo/service/getComtypeList=anon
                /appapi/pubinfo/**=anon
                /appapi/provider/indexService=anon
                /appapi/goodsinfo/company/queryCompanyDetails=anon
                /appapi/goodsinfo/service/queryServiceProviderByAjax=anon
                /appapi/userinfo/providerdetails/preproviderdetails=anon
                /appapi/userinfo/providerdetails/ajaxpaging=anon
                /appapi/**=token
                <!--/**= f1,f2,f3,f4,authc,authcBasic-->
                <!--/index.html=anon,ssl&lt;!&ndash;访问这个地址必须是https 不然会自动转成https&ndash;&gt;-->
                <!--/test= port[80]&lt;!&ndash;访问这个地址不是用的80 将会自动重定向到80&ndash;&gt;-->
                <!--/user = user&lt;!&ndash;表示访问该地址的用户是身份验证通过或 RememberMe 登录的都可以&ndash;&gt;-->
            </value>
        </property>
    </bean>


    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


</beans>