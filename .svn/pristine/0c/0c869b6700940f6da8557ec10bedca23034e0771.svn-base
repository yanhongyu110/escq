package com.jero.esc.controller.userinfo;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.jero.esc.common.po.JsonResult;
import com.jero.esc.common.utils.CheckCode;
import com.jero.esc.common.utils.JsonUtil;
import com.jero.esc.common.utils.MD5Util;
import com.jero.esc.common.utils.exception.ExceptionWithMessage;
import com.jero.esc.po.userinfo.AccountInfo;
import com.jero.esc.po.userinfo.LogInfo;

import org.apache.ibatis.session.RowBounds;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.jero.esc.common.controller.BaseController;
import com.jero.esc.service.userinfo.IAccountInfoService;
import com.jero.esc.vo.userinfo.AccountVo;

/**
 * @copyright 上善云图信息技术有限公司
 * @author xfj
 * @version v1.0
 * @date 2016年12月8日
 * @description 账户管理
 */
@Controller
@RequestMapping(value = "/userinfo")
public class AccountInfoController extends BaseController {
	private Logger log = Logger.getLogger(getClass());
	@Autowired
	private IAccountInfoService accountInfoService;

	/**
	 * @version v1.0
	 * @date 2016年12月8日
	 * @description 账户收支查询
	 * @param page
	 * @return ModelAndView
	 * @method listAccountInfo
	 */
	@RequestMapping(value = "/accountInfo/listAccountInfo")
	public ModelAndView listAccountInfo(HttpSession session, Integer page) {
		Integer pageSize = 10;
		String logId = this.retrievalCurrentUserInfo(session).getLogId();
		RowBounds rb = this.getRowBounds(page, pageSize);
		List<AccountVo> accList = accountInfoService.queryLogAccById(rb, logId);
		Integer count = accountInfoService.queryLogAccCountById(logId);
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.addObject("accList", accList);
		modelAndView.setViewName("");
		return modelAndView;
	}

	/**
	 * @description
	 * @param session
	 * @param payPass
	 * @param response
	 * @return String
	 * @method judgePayPass
	 */
	@RequestMapping(value = "/accountInfo/judgePayPass", produces = "text/html;charset=UTF-8")
	public String judgePayPass(HttpSession session, String payPass) {
		JsonResult jr = new JsonResult();
		AccountInfo acc = new AccountInfo();
		String logId = this.retrievalCurrentUserInfo(session).getLogId();
		if (payPass == null || payPass.isEmpty()) {
			jr.setSuccess(false);
			jr.setErrorMsg("请先输入密码");
			jr.setErrorCode("2");
			return jr.toJSON();
		}
		acc.setLogId(logId);
		acc.setAccPaypass(payPass);
		try {
			Boolean temp = accountInfoService.judgePayPass(acc);

		} catch (ExceptionWithMessage e) {
			// 未设定支付密码
			return e.jsonResult.toJSON();
		} catch (Exception e) {
			return new JsonResult(false, "添加失败", null).toJSON();
		}
		return "{url:''}";
	}

	/**
	 * 
	 * @version v1.0 (版本号)
	 * @date 2017年1月5日
	 * @description 跳转到支付密码修改
	 * @param session
	 * @return ModelAndView
	 * @throws Exception 
	 * @method jumpModifyPayPassById
	 */
	@RequestMapping(value = "/accountInfo/jumpModifyPayPass")
	public ModelAndView jumpModifyPayPassById(HttpSession session) throws Exception {
		validaLog(session);
		ModelAndView mv = new ModelAndView();
		LogInfo loginfo=this.retrievalCurrentUserInfo(session);
		mv.addObject("loginfo",loginfo);
		mv.setViewName("userinfo/modifyPayPass");
		return mv;
	}
	/**
	 * 
	 * @version v1.0 (版本号)
	 * @date 2017年1月5日
	 * @description 修改支付密码 
	 * @param request
	 * @param response
	 * @param session
	 * @param checkCode
	 * @param logPass
	 * @param newPass void
	 * @method  modifyPassByPrimaryKey
	 */
	@RequestMapping(value = "/accountInfo/modifyPassById")
	public void modifyPassId(HttpServletRequest request, HttpServletResponse response, HttpSession session,
			String checkCode, String logPass, String newPass) {
		JsonResult jr = new JsonResult();

		if (checkCode == null || checkCode.isEmpty()) {
			jr.setSuccess(false);
			jr.setErrorMsg("手机验证码不能为空");
			jr.setErrorCode("2");
			JsonUtil.printByJSON(response, jr);
			return;
		}
		if (logPass == null || logPass.isEmpty()) {
			jr.setSuccess(false);
			jr.setErrorMsg("密码不能为空");
			jr.setErrorCode("3");
			JsonUtil.printByJSON(response, jr);
			return;
		}

		if (newPass.length() < 6 || newPass.length() > 20) {
			jr.setSuccess(false);
			jr.setErrorMsg("密码必须在6至20位之间");
			jr.setErrorCode("3");
			JsonUtil.printByJSON(response, jr);
			return;
		}

		if (session.getAttribute("checkCode") == null) {
			jr.setSuccess(false);
			jr.setErrorMsg("您未获取手机验证码");
			jr.setErrorCode("2");
			JsonUtil.printByJSON(response, jr);
			return;
		}
		if (!checkCode.equals(session.getAttribute("checkCode").toString())) {
			jr.setSuccess(false);
			jr.setErrorMsg("手机验证码错误");
			jr.setErrorCode("2");
			JsonUtil.printByJSON(response, jr);
			return;
		}
		 
		AccountInfo accountInfo=new AccountInfo();
		accountInfo.setLogId(this.retrievalCurrentUserInfo(session).getLogId());
		try {
			accountInfo.setAccPaypass(MD5Util.getMD5(logPass));
		} catch (Exception e) {
			jr.setErrorMsg("修改密码加密错误！");
			e.printStackTrace();
		}
		int res=accountInfoService.modifyPayPassById(accountInfo);
		if(res<=0){
			jr.setErrorMsg("修改密码错误！");
		}
		session.removeAttribute("checkCode");
		JsonUtil.printByJSON(response, jr);

	}
	/**
	 * 
	 * @version v1.0 (版本号)
	 * @date 2016年12月23日
	 * @description获取短信验证码
	 * @param response
	 * @param request
	 * @param session
	 * @param logCell
	 *            void
	 * @method sendMesToUser
	 */
	@RequestMapping(value = "/accountInfo/sendMes")
	public void sendMes(HttpServletResponse response, HttpServletRequest request, HttpSession session,
			String logCell, String type) {
		JsonResult jr = new JsonResult();
		if (logCell == null || logCell.isEmpty()) {
			jr.setSuccess(false);
			jr.setErrorMsg("手机号不能为空");
			jr.setErrorCode("1");
			JsonUtil.printByJSON(response, jr);
			return;
		}
		Pattern p = Pattern.compile("^(((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\\d{8})$");
		Matcher m = p.matcher(logCell);
		if (false == m.matches()) {
			jr.setSuccess(false);
			jr.setErrorMsg("手机号格式不正确");
			jr.setErrorCode("1");
			JsonUtil.printByJSON(response, jr);
			return;
		}
		try {
			String param = "";
			if("1".equals(type)){
				param = "您正在进行近到家互联网专家平台手机绑定";
			}else{
				param = "您正在进行近到家互联网专家平台密码修改";
			}
			CheckCode.getCheckCode(session, logCell, param);
			jr.setSuccess(true);
		} catch (Exception e) {
			e.printStackTrace();
			log.error("用户获取验证码异常" + e);
			jr.setSuccess(false);
			jr.setErrorMsg("获取验证码异常,请联系网站客服");
			jr.setErrorCode("1");
		}
		JsonUtil.printByJSON(response, jr);
	}
}
