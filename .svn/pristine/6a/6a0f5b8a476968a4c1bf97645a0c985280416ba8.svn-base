package com.jero.esc.service.impl.details;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jero.esc.common.utils.UUIDUtil;
import com.jero.esc.common.utils.exception.ExceptionWithMessage;
import com.jero.esc.mapper.details.AccontPaymentDetailsMapper;
import com.jero.esc.po.details.AccontPaymentDetails;
import com.jero.esc.po.userinfo.AccountInfo;
import com.jero.esc.service.details.IAccountPaymentDetailsService;
import com.jero.esc.service.userinfo.IAccountInfoService;

@Service
public class AccountPaymentDetailsService implements IAccountPaymentDetailsService{
	@Autowired
	private AccontPaymentDetailsMapper accontPaymentDetailsMapper;
	@Autowired
	private IAccountInfoService accountInfoService;
	
	
	@Override
	public Integer queryAccountAmountById(String logId,String startTime,String endTime) {
		Integer comein = accontPaymentDetailsMapper.selectAccountInAmountById(logId,startTime,endTime);
		Integer comeout = accontPaymentDetailsMapper.selectAccountInAmountById(logId,startTime,endTime);
		return comein - comeout;
	}

	@Override
	public List<AccontPaymentDetails> queryAccountIOByIdYear(RowBounds rb,String logId, String startTime, String endTime) {
		return accontPaymentDetailsMapper.selectAccountIOByIdYear(rb,logId, startTime, endTime);
	}

	@Override
	public List<AccontPaymentDetails> queryAccountIOByIdMonth(RowBounds rb,String logId, String startTime, String endTime) {
		return accontPaymentDetailsMapper.selectAccountIOByIdMonth(rb,logId, startTime, endTime);
	}

	@Override
	public List<AccontPaymentDetails> queryAccountIOByIdDay(RowBounds rb,String logId, String startTime, String endTime) {
		return accontPaymentDetailsMapper.selectAccountIOByIdDay(rb,logId, startTime, endTime);
	}

	@Override
	public HashMap<String, Object> queryAccountIODetailsById(RowBounds rb,String logId,String startTime,String endTime) {
		List<AccountInfo> accList = accountInfoService.queryBalanceById(logId);
		List<AccontPaymentDetails> apdList =  accontPaymentDetailsMapper.selectAccountIODetailsById(rb,logId,startTime,endTime);
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("accList", accList);
		map.put("apdList", apdList);
		return map;
	}

	@Override
	public Integer queryAccountIODetailsCountById(String logId,String startTime,String endTime) {
		return accontPaymentDetailsMapper.selectAccountIODetailsCountById(logId,startTime,endTime);
	}

	@Override
	public Integer queryAccountIOCountByIdYear(String logId, String startTime, String endTime) {
		return accontPaymentDetailsMapper.selectAccountIOCountByIdYear(logId, startTime, endTime);
	}

	@Override
	public Integer queryAccountIOCountByIdMonth(String logId, String startTime, String endTime) {
		return accontPaymentDetailsMapper.selectAccountIOCountByIdMonth(logId, startTime, endTime);
	}

	@Override
	public Integer queryAccountIOCountByIdDay(String logId, String startTime, String endTime) {
		return accontPaymentDetailsMapper.selectAccountIOCountByIdDay(logId, startTime, endTime);
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public Integer addAccountIODetails(AccontPaymentDetails accontPaymentDetails) throws Exception{
		accontPaymentDetails.setApdCreatetime(new Date());
		accontPaymentDetails.setApdId(UUIDUtil.getUUID());
		Integer res = accontPaymentDetailsMapper.insertSelective(accontPaymentDetails);
		if(res>0){
			return res;
		}
		throw new ExceptionWithMessage("添加失败",null);
	}

}
